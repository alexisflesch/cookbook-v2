This is METAFONT, Version 2.71828 (Web2C 7.5.6) (base=mf 2010.5.7)  28 JUL 2011 08:27
**\mode:=ljfour; mag:=2+293/600; nonstopmode; input wnris10
(/usr/share/texmf-texlive/fonts/source/public/wnri/wnris10.mf
(/usr/share/texmf-texlive/fonts/source/public/cm/cmbase.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanskt.mf
(/usr/share/texmf-texlive/fonts/source/public/wnri/product.mf)
(/usr/share/texmf-texlive/fonts/source/public/cm/romanu.mf [65] [66] [67]
[68] [69] [70] [71] [72] [73] [74] [75] [76] [77] [78] [79] [80] [81] [82]
[83] [84] [85] [86] [87] [88] [89] [90])
(/usr/share/texmf-texlive/fonts/source/public/cm/romanl.mf [97] [98] [99]
[100] [101] [102] [103] [104] [105] [106] [107] [108] [109] [110] [111]
[112] [113] [114] [115] [116] [117] [118] [119] [120] [121] [122])
(/usr/share/texmf-texlive/fonts/source/public/cm/greeku.mf [0] [1] [2] [3]
[4] [5] [6] [7] [8] [9] [10])
(/usr/share/texmf-texlive/fonts/source/public/cm/romand.mf [48] [49] [50]
[51] [52] [53] [54] [55] [56] [57])
(/usr/share/texmf-texlive/fonts/source/public/cm/romanp.mf [36] [38] [63]
[62]) (/usr/share/texmf-texlive/fonts/source/public/cm/romspl.mf [16] [17]
[25] [26] [27] [28]) (/usr/share/texmf-texlive/fonts/source/public/cm/romspu.mf
[29] [30] [31]) (/usr/share/texmf-texlive/fonts/source/public/cm/punct.mf
[33] [60] [35] [37] [39] [40] [41] [42] [43] [44] [46] [47] [58] [59] [61]
[64] [91] [93] [96]) (/usr/share/texmf-texlive/fonts/source/public/cm/accent.mf
[18] [19] [20] [21] [22] [23] [24] [32] [94] [95] [125] [126] [127])
(/usr/share/texmf-texlive/fonts/source/public/cm/romlig.mf [11] [12] [13]
[14] [15]) (/usr/share/texmf-texlive/fonts/source/public/cm/comlig.mf [34]
[45] [92] [123] [124])
(/usr/share/texmf-texlive/fonts/source/public/wnri/haccbase.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/wnindic.map)
(/usr/share/texmf-texlive/fonts/source/public/lfb/gamma.mf
>> 0.0484extra+3.8889
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.139 ...ma, width#+extra#, x_height#, descender#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> descender#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.139 ...ma, width#+extra#, x_height#, descender#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.52242x2r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...th;y8=x_height;x8l=width;fill.z1l..
                                                  tension1.8..z2l..z3l..{dow...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.52242x2r+y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...th;y8=x_height;x8l=width;fill.z1l..
                                                  tension1.8..z2l..z3l..{dow...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x2r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...l=width;fill.z1l..tension1.8..z2l..
                                                  z3l..{down}z5l..z6l..z7l{u...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5x3r+0.02242x2r+y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...l=width;fill.z1l..tension1.8..z2l..
                                                  z3l..{down}z5l..z6l..z7l{u...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5x3r+0.5x2r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...th;fill.z1l..tension1.8..z2l..z3l..
                                                  {down}z5l..z6l..z7l{up}..z...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...th;fill.z1l..tension1.8..z2l..z3l..
                                                  {down}z5l..z6l..z7l{up}..z...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->.....tension1.8..z2l..z3l..{down}z5l..
                                                  z6l..z7l{up}..z8l--z8r..{d...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...sion1.8..z2l..z3l..{down}z5l..z6l..
                                                  z7l{up}..z8l--z8r..{down}z...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
gen_letter->...1.8..z2l..z3l..{down}z5l..z6l..z7l{
                                                  up}..z8l--z8r..{down}z7r.....
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5x3r+0.5x2r+80.33919
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...{down}z5l..z6l..z7l{up}..z8l--z8r..
                                                  {down}z7r..z6r..z5r{up}..z...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3r-0.5x3r-0.02242x2r-y1r+44.1868
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...z6l..z7l{up}..z8l--z8r..{down}z7r..
                                                  z6r..z5r{up}..z3r..z2r..te...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...z6l..z7l{up}..z8l--z8r..{down}z7r..
                                                  z6r..z5r{up}..z3r..z2r..te...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r-17.16685
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...z7l{up}..z8l--z8r..{down}z7r..z6r..
                                                  z5r{up}..z3r..z2r..tension...
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.7388x2r+44.1868
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
gen_letter->...up}..z8l--z8r..{down}z7r..z6r..z5r{
                                                  up}..z3r..z2r..tension1.5....
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
gen_letter->...up}..z8l--z8r..{down}z7r..z6r..z5r{
                                                  up}..z3r..z2r..tension1.5....
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...z8r..{down}z7r..z6r..z5r{up}..z3r..
                                                  z2r..tension1.5..z1r--cycle;
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...z8r..{down}z7r..z6r..z5r{up}..z3r..
                                                  z2r..tension1.5..z1r--cycle;
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x2r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
gen_letter->...{down}z7r..z6r..z5r{up}..z3r..z2r..
                                                  tension1.5..z1r--cycle;
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
gen_letter->...5r{up}..z3r..z2r..tension1.5..z1r--
                                                  cycle;
l.140 gen_letter
                ; penlabels(1,2,3,4,5,6,7,8,9);
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

[0]) (/usr/share/texmf-texlive/fonts/source/public/lfb/ligature.mf
>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.111 ligtable sigma:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -1
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.112 	boundarychar				=:|
                           sigmafinal,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigmafinal
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.112 	boundarychar				=:| sigmafinal,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> fullstop
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.113 	fullstop					=:|
                        sigmafinal,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigmafinal
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.113 	fullstop					=:| sigmafinal,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

>> pen
! Invalid code has been replaced by 0.
<to be read again> 
                   :=
numeric_pickup_->currentpen:=
                             pen_[(EXPR0)];pen_lft:=pen_lft_[(EXPR0)];pen_rt...
<to be read again> 
                   ;
comma->pickup.fine.nib;
                       pos(SUFFIX0)((EXPR2),90);if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Illegal ligtable step.
<to be read again> 
                   :=
numeric_pickup_->currentpen:=
                             pen_[(EXPR0)];pen_lft:=pen_lft_[(EXPR0)];pen_rt...
<to be read again> 
                   ;
comma->pickup.fine.nib;
                       pos(SUFFIX0)((EXPR2),90);if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I was looking for `=:' or `kern' here.

! Extra tokens will be flushed.
<to be read again> 
                   :=
<to be read again> 
                   :=
numeric_pickup_->currentpen:=
                             pen_[(EXPR0)];pen_lft:=pen_lft_[(EXPR0)];pen_rt...
<to be read again> 
                   ;
comma->pickup.fine.nib;
                       pos(SUFFIX0)((EXPR2),90);if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! bad pos.
<to be read again> 
                   ;
pos->...XPR3)<=currentbreadth:errmessage"bad pos";
                                                  fi.fi(x(SUFFIX2)r-x(SUFFIX...

comma->pickup.fine.nib;pos(SUFFIX0)((EXPR2),90)
                                               ;if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
This error message was generated by an `errmessage'
command, so I can't give any explicit help.
Pretend that you're Miss Marple: Examine all clues,
and deduce the truth by inspired guesses.

! bad pos.
<to be read again> 
                   ;
pos->...XPR3)<=currentbreadth:errmessage"bad pos";
                                                  fi.fi(x(SUFFIX2)r-x(SUFFIX...

comma->...;if.square_dots:pos(SUFFIX0)'((EXPR2),0)
                                                  ;z(SUFFIX0)'=z(SUFFIX0);do...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
(That was another `errmessage'.)

>> x.r+0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...if.square_dots:(x(SUFFIX0)l,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)l)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...if.square_dots:(x(SUFFIX0)l,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)l)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)r)--
                                                  (x(SUFFIX0)l,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)r)--
                                                  (x(SUFFIX0)l,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r+0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)r)--(x(SUFFIX0)l,y(SUFFIX1)r)--
                                                  cycle.else:z(SUFFIX0)l...z...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)r)--(x(SUFFIX0)l,y(SUFFIX1)r)--
                                                  cycle.else:z(SUFFIX0)l...z...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.00049
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
comma->...;rt.x(SUFFIX1)2r=good.x(x(SUFFIX0)-eps);
                                                  filldraw.stroke.z(SUFFIX1)...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x.r-0.50024
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.49976
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.50024
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(l)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(l)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.00098
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.49976
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(r)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(r)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.00049
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! A statement can't begin with `=:|'.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I was looking for the beginning of a new statement.
If you just proceed without changing anything, I'll ignore
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> kappa
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.123 ligtable kappa:
                      gamma: khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.123 ligtable kappa:
                      gamma: khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> gamma
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.123 ligtable kappa: gamma:
                             khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.123 ligtable kappa: gamma:
                             khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> khi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.123 ligtable kappa: gamma: khi:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.123 ligtable kappa: gamma: khi:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.124 	aspirate					=:
                       khi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> khi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.124 	aspirate					=: khi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.125 	sigma						=:
                     xi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> xi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.125 	sigma						=: xi;
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> tau
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.126 ligtable tau:
                    delta: theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.126 ligtable tau:
                    delta: theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> (0,0)
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.126 ligtable tau: delta:
                           theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.126 ligtable tau: delta:
                           theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.127 	aspirate					=:
                       theta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> pi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.128 ligtable pi:
                   beta: phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.128 ligtable pi:
                   beta: phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> beta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.128 ligtable pi: beta:
                         phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.128 ligtable pi: beta:
                         phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> phi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.128 ligtable pi: beta: phi:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.128 ligtable pi: beta: phi:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.129 	aspirate					=:
                       phi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> phi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.129 	aspirate					=: phi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.130 	sigma						=:
                     psi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> psi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.130 	sigma						=: psi;
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Kappa
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.131 ligtable Kappa:
                      Gamma: Khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.131 ligtable Kappa:
                      Gamma: Khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Gamma
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma:
                             Khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma:
                             Khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Khi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma: Khi:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma: Khi:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.132 	aspirate					=:
                       Khi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Khi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.132 	aspirate					=: Khi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.133 	Aspirate					=:
                       Khi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Khi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.133 	Aspirate					=: Khi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.134 	sigma						=:
                     Xi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Xi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.134 	sigma						=: Xi,
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.135 	Sigma						=:
                     Xi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Xi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.135 	Sigma						=: Xi;
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Tau
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.136 ligtable Tau:
                    Delta: Theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.136 ligtable Tau:
                    Delta: Theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Delta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.136 ligtable Tau: Delta:
                           Theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.136 ligtable Tau: Delta:
                           Theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Theta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.136 ligtable Tau: Delta: Theta:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.136 ligtable Tau: Delta: Theta:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.137 	aspirate					=:
                       Theta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Theta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.137 	aspirate					=: Theta,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.138 	Aspirate					=:
                       Theta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Theta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.138 	Aspirate					=: Theta;
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Pi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.139 ligtable Pi:
                   Beta: Phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.139 ligtable Pi:
                   Beta: Phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Beta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.139 ligtable Pi: Beta:
                         Phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.139 ligtable Pi: Beta:
                         Phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Phi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.139 ligtable Pi: Beta: Phi:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.139 ligtable Pi: Beta: Phi:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.140 	aspirate					=:
                       Phi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Phi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.140 	aspirate					=: Phi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.141 	Aspirate					=:
                       Phi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Phi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.141 	Aspirate					=: Phi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.142 	sigma						=:
                     Psi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Psi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.142 	sigma						=: Psi,
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.143 	Sigma						=:
                     Psi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Psi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.143 	Sigma						=: Psi;
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.147 	smooth:
              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.147 	smooth:
              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.148 	rough:
             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.148 	rough:
             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.149 	acute:
             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.149 	acute:
             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.150 	grave:
             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.150 	grave:
             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.151 	circ:
            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.151 	circ:
            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.152 	smoothacute:
                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.152 	smoothacute:
                   
It's not legal to label a character more than once.
So I'll not change anything just now.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.153 	smoothgrave:
                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.153 	smoothgrave:
                   
It's not legal to label a character more than once.
So I'll not change anything just now.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.154 	smoothcirc:
                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.154 	smoothcirc:
                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.155 	roughacute:
                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.155 	roughacute:
                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.156 	roughgrave:
                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.156 	roughgrave:
                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.157 	roughcirc:
                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.157 	roughcirc:
                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   kern
l.158 	Alpha						kern
                       -2letterspace#;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -0.06454extra
! Improper kern.
<to be read again> 
                   ;
l.158 	Alpha						kern -2letterspace#;
                                      
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.162 ligtable apostrophe:
                           apostrophe kern -2.5letterspace#, skipto 2;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.162 ligtable apostrophe:
                           apostrophe kern -2.5letterspace#, skipto 2;
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   kern
l.162 ligtable apostrophe: apostrophe kern
                                           -2.5letterspace#, skipto 2;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -0.08067extra
! Improper kern.
<to be read again> 
                   ,
l.162 ...trophe: apostrophe kern -2.5letterspace#,
                                                   skipto 2;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.163 ligtable backquote:
                          backquote kern -2.5letterspace#, skipto 3;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.163 ligtable backquote:
                          backquote kern -2.5letterspace#, skipto 3;
It's not legal to label a character more than once.
So I'll not change anything just now.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   kern
l.163 ligtable backquote: backquote kern
                                         -2.5letterspace#, skipto 3;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -0.08067extra
! Improper kern.
<to be read again> 
                   ,
l.163 ...ckquote: backquote kern -2.5letterspace#,
                                                   skipto 3;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> hyphen
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.167 ligtable hyphen:
                       hyphen			=: emdash;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.167 ligtable hyphen:
                       hyphen			=: emdash;
It's not legal to label a character more than once.
So I'll not change anything just now.

>> hyphen
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.167 ligtable hyphen: hyphen			=:
                                   emdash;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> emdash
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.167 ligtable hyphen: hyphen			=: emdash;
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.172 	Alpha						=:|
                      smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.172 	Alpha						=:| smoothacute,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.173 	Epsilon						=:|
                        smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.173 	Epsilon						=:| smoothacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.174 	Eta							=:|
                     smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.174 	Eta							=:| smoothacute,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.175 	Iota						=:|
                     smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.175 	Iota						=:| smoothacute,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.176 	Omikron						=:|
                        smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.176 	Omikron						=:| smoothacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.177 	Upsilon						=:|
                        smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.177 	Upsilon						=:| smoothacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.178 	Omega						=:|
                      smoothacute;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.178 	Omega						=:| smoothacute;
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.180 	Alpha						=:|
                      smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.180 	Alpha						=:| smoothgrave,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.181 	Epsilon						=:|
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.181 	Epsilon						=:| smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.182 	Eta							=:|
                     smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.182 	Eta							=:| smoothgrave,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.183 	Iota						=:|
                     smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.183 	Iota						=:| smoothgrave,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.184 	Omikron						=:|
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.184 	Omikron						=:| smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.185 	Upsilon						=:|
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.185 	Upsilon						=:| smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.186 	Omega						=:|
                      smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.186 	Omega						=:| smoothgrave,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> coronis
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.188 ligtable coronis:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.188 ligtable coronis:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.189 	apostrophe					=:
                         smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.189 	apostrophe					=: smoothacute,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.190 	backquote					=:
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.190 	backquote					=: smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.191 	circumflex					=:
                         smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.191 	circumflex					=: smoothcirc,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.192 	alpha						=: alpha_acc+smooth,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.193 	epsilon						=: epsilon_acc+smooth,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.194 	eta							=:
                    eta_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.194 	eta							=: eta_acc+smooth,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.195 	iota						=:
                    iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.195 	iota						=: iota_acc+smooth,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.196 	omikron						=:
                       omikron_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.196 	omikron						=: omikron_acc+smooth,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.197 	upsilon						=:
                       upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.197 	upsilon						=: upsilon_acc+smooth,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.198 	omega						=:
                     omega_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.198 	omega						=: omega_acc+smooth,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.199 	rho							=:
                    rho_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.199 	rho							=: rho_acc+smooth,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.200 	Alpha						=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.200 	Alpha						=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.201 	Epsilon						=:|
                        smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.201 	Epsilon						=:| smooth,
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.202 	Eta							=:|
                     smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.202 	Eta							=:| smooth,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.203 	Iota						=:|
                     smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.203 	Iota						=:| smooth,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.204 	Omikron						=:|
                        smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.204 	Omikron						=:| smooth,
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.205 	Upsilon						=:|
                        smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.205 	Upsilon						=:| smooth,
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.206 	Omega						=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.206 	Omega						=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.207 	Rho							=:|
                     smooth;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.207 	Rho							=:| smooth;
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> openparenthesis
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis:
                                    emdash: 1::
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis:
                                    emdash: 1::
It's not legal to label a character more than once.
So I'll not change anything just now.

>> emdash
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis: emdash:
                                            1::
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis: emdash:
                                            1::
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.209 	alpha						|=: alpha_acc+smooth,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.210 	epsilon						|=: epsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.211 	eta							|=:
                     eta_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.211 	eta							|=: eta_acc+smooth,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.212 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.212 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.213 	omikron						|=:
                        omikron_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.213 	omikron						|=: omikron_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.214 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.214 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.215 	omega						|=:
                      omega_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.215 	omega						|=: omega_acc+smooth,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.216 	rho							|=:
                     rho_acc+rough,	% initial rho should be rough
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.216 	rho							|=: rho_acc+rough,
                                   	% initial rho should be rough
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.217 	Alpha						|=:|
                       smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.217 	Alpha						|=:| smooth,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.218 	Epsilon						|=:|
                         smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.218 	Epsilon						|=:| smooth,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.219 	Eta							|=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.219 	Eta							|=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.220 	Iota						|=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.220 	Iota						|=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.221 	Omikron						|=:|
                         smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.221 	Omikron						|=:| smooth,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.222 	Upsilon						|=:|
                         smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.222 	Upsilon						|=:| smooth,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.223 	Omega						|=:|
                       smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.223 	Omega						|=:| smooth,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Rho
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.224 	Rho							|=:|
                      rough;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.224 	Rho							|=:| rough;
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.225 ligtable circumflex:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.225 ligtable circumflex:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.226 	Alpha						=:|
                      smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.226 	Alpha						=:| smoothcirc,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.227 	Epsilon						=:|
                        smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.227 	Epsilon						=:| smoothcirc,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.228 	Eta							=:|
                     smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.228 	Eta							=:| smoothcirc,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.229 	Iota						=:|
                     smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.229 	Iota						=:| smoothcirc,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.230 	Omikron						=:|
                        smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.230 	Omikron						=:| smoothcirc,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.231 	Upsilon						=:|
                        smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.231 	Upsilon						=:| smoothcirc,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.232 	Omega						=:|
                      smoothcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.232 	Omega						=:| smoothcirc;
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.233 ligtable alpha_acc+smooth:
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.233 ligtable alpha_acc+smooth:
                                
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.234 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.234 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.235 	iota_acc+smooth				=:|
                              alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.236 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.236 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.237 	upsilon_acc+smooth			=:|
                                alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.238 	apostrophe					=:
                         alpha_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.238 	apostrophe					=: alpha_acc+smoothacute,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.239 	backquote					=:
                        alpha_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.239 	backquote					=: alpha_acc+smoothgrave,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.240 	circumflex					=:
                         alpha_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.240 	circumflex					=: alpha_acc+smoothcirc,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.241 	brevechar					=:
                        alpha_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.241 	brevechar					=: alpha_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.242 	macronchar					=:
                         alpha_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.242 	macronchar					=: alpha_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.243 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.243 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.244 ligtable epsilon_acc+smooth:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.244 ligtable epsilon_acc+smooth:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.245 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.245 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.246 	iota_acc+smooth				=:|
                              epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.247 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.247 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.248 	upsilon_acc+smooth			=:|
                                epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.249 	apostrophe					=:
                         epsilon_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.249 	apostrophe					=: epsilon_acc+smoothacute,
                                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.250 	backquote					=:
                        epsilon_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.250 	backquote					=: epsilon_acc+smoothgrave,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.251 	circumflex					=:
                         epsilon_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.251 	circumflex					=: epsilon_acc+smoothcirc,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.252 	brevechar					=:
                        epsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.252 	brevechar					=: epsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.253 	macronchar					=:
                         epsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.253 	macronchar					=: epsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.254 ligtable eta_acc+smooth:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.254 ligtable eta_acc+smooth:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.255 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.255 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.256 	iota_acc+smooth				=:|
                              eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.256 	iota_acc+smooth				=:| eta,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.257 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.257 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.258 	upsilon_acc+smooth			=:|
                                eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.258 	upsilon_acc+smooth			=:| eta,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.259 	apostrophe					=:
                         eta_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.259 	apostrophe					=: eta_acc+smoothacute,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.260 	backquote					=:
                        eta_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.260 	backquote					=: eta_acc+smoothgrave,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.261 	circumflex					=:
                         eta_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.261 	circumflex					=: eta_acc+smoothcirc,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.262 	brevechar					=:
                        eta_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.262 	brevechar					=: eta_acc+breve,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.263 	macronchar					=:
                         eta_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.263 	macronchar					=: eta_acc+macron,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.264 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.264 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.265 ligtable iota_acc+smooth:
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.265 ligtable iota_acc+smooth:
                               
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.266 	apostrophe					=:
                         iota_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.266 	apostrophe					=: iota_acc+smoothacute,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.267 	backquote					=:
                        iota_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.267 	backquote					=: iota_acc+smoothgrave,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.268 	circumflex					=:
                         iota_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.268 	circumflex					=: iota_acc+smoothcirc,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.269 	brevechar					=:
                        iota_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.269 	brevechar					=: iota_acc+breve,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.270 	macronchar					=:
                         iota_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.270 	macronchar					=: iota_acc+macron;
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.271 ligtable omikron_acc+smooth:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.271 ligtable omikron_acc+smooth:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.272 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.272 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.273 	iota_acc+smooth				=:|
                              omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.273 	iota_acc+smooth				=:| omikron,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.274 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.274 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.275 	upsilon_acc+smooth			=:|
                                omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.275 	upsilon_acc+smooth			=:| omikron,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.276 	apostrophe					=:
                         omikron_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.276 	apostrophe					=: omikron_acc+smoothacute,
                                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.277 	backquote					=:
                        omikron_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.277 	backquote					=: omikron_acc+smoothgrave,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.278 	circumflex					=:
                         omikron_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.278 	circumflex					=: omikron_acc+smoothcirc,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.279 	brevechar					=:
                        omikron_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.279 	brevechar					=: omikron_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.280 	macronchar					=:
                         omikron_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.280 	macronchar					=: omikron_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.281 ligtable upsilon_acc+smooth:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.281 ligtable upsilon_acc+smooth:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.282 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.282 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.283 	iota_acc+smooth				=:|
                              upsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.283 	iota_acc+smooth				=:| upsilon,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.284 	apostrophe					=:
                         upsilon_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.284 	apostrophe					=: upsilon_acc+smoothacute,
                                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.285 	backquote					=:
                        upsilon_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.285 	backquote					=: upsilon_acc+smoothgrave,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.286 	circumflex					=:
                         upsilon_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.286 	circumflex					=: upsilon_acc+smoothcirc,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.287 	brevechar					=:
                        upsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.287 	brevechar					=: upsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.288 	macronchar					=:
                         upsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.288 	macronchar					=: upsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.289 ligtable omega_acc+smooth:
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.289 ligtable omega_acc+smooth:
                                
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.290 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.290 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.291 	iota_acc+smooth				=:|
                              omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.291 	iota_acc+smooth				=:| omega,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.292 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.292 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.293 	upsilon_acc+smooth			=:|
                                omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.293 	upsilon_acc+smooth			=:| omega,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.294 	apostrophe					=:
                         omega_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.294 	apostrophe					=: omega_acc+smoothacute,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.295 	backquote					=:
                        omega_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.295 	backquote					=: omega_acc+smoothgrave,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.296 	circumflex					=:
                         omega_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.296 	circumflex					=: omega_acc+smoothcirc,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.297 	brevechar					=:
                        omega_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.297 	brevechar					=: omega_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.298 	macronchar					=:
                         omega_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.298 	macronchar					=: omega_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.299 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.299 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.300 ligtable rho_acc+smooth:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.300 ligtable rho_acc+smooth:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.301 	rho							|=:
                     rho_acc+rough;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.301 	rho							|=: rho_acc+rough;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.304 ligtable aspirate:
                         Aspirate:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.304 ligtable aspirate:
                         Aspirate:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.304 ligtable aspirate: Aspirate:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.304 ligtable aspirate: Aspirate:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.305 	alpha						=: alpha_acc+rough,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.306 	epsilon						=: epsilon_acc+rough,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.307 	eta							=:
                    eta_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.307 	eta							=: eta_acc+rough,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.308 	iota						=:
                    iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.308 	iota						=: iota_acc+rough,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.309 	omikron						=:
                       omikron_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.309 	omikron						=: omikron_acc+rough,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.310 	upsilon						=:
                       upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.310 	upsilon						=: upsilon_acc+rough,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.311 	omega						=:
                     omega_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.311 	omega						=: omega_acc+rough,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.312 	rho							=:
                    rho_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.312 	rho							=: rho_acc+rough,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.313 	Alpha						=:|
                      rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.313 	Alpha						=:| rough,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.314 	Epsilon						=:|
                        rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.314 	Epsilon						=:| rough,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.315 	Eta							=:|
                     rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.315 	Eta							=:| rough,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.316 	Iota						=:|
                     rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.316 	Iota						=:| rough,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.317 	Omikron						=:|
                        rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.317 	Omikron						=:| rough,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.318 	Upsilon						=:|
                        rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.318 	Upsilon						=:| rough,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.319 	Omega						=:|
                      rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.319 	Omega						=:| rough,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.320 	Rho							=:|
                     rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.320 	Rho							=:| rough,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.321 	apostrophe					=:
                         roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.321 	apostrophe					=: roughacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.322 	backquote					=:
                        roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.322 	backquote					=: roughgrave,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.323 	circumflex					=:
                         roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.323 	circumflex					=: roughcirc;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.324 ligtable alpha_acc+rough:
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.324 ligtable alpha_acc+rough:
                               
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.325 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.325 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.326 	iota_acc+rough				=:|
                             alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.327 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.327 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.328 	upsilon_acc+rough			=:|
                               alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.329 	apostrophe					=:
                         alpha_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.329 	apostrophe					=: alpha_acc+roughacute,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.330 	backquote					=:
                        alpha_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.330 	backquote					=: alpha_acc+roughgrave,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.331 	circumflex					=:
                         alpha_acc+roughcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.331 	circumflex					=: alpha_acc+roughcirc,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.332 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.332 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.333 ligtable epsilon_acc+rough:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.333 ligtable epsilon_acc+rough:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.334 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.334 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.335 	iota_acc+rough				=:|
                             epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.336 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.336 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.337 	upsilon_acc+rough			=:|
                               epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.338 	apostrophe					=:
                         epsilon_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.338 	apostrophe					=: epsilon_acc+roughacute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.339 	backquote					=:
                        epsilon_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.339 	backquote					=: epsilon_acc+roughgrave,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.340 	circumflex					=:
                         epsilon_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.340 	circumflex					=: epsilon_acc+roughcirc;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.341 ligtable eta_acc+rough:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.341 ligtable eta_acc+rough:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.342 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.342 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.343 	iota_acc+rough				=:|
                             eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.343 	iota_acc+rough				=:| eta,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.344 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.344 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.345 	upsilon_acc+rough			=:|
                               eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.345 	upsilon_acc+rough			=:| eta,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.346 	apostrophe					=:
                         eta_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.346 	apostrophe					=: eta_acc+roughacute,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.347 	backquote					=:
                        eta_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.347 	backquote					=: eta_acc+roughgrave,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.348 	circumflex					=:
                         eta_acc+roughcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.348 	circumflex					=: eta_acc+roughcirc,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.349 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.349 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.350 ligtable iota_acc+rough:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.350 ligtable iota_acc+rough:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.351 	apostrophe					=:
                         iota_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.351 	apostrophe					=: iota_acc+roughacute,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.352 	backquote					=:
                        iota_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.352 	backquote					=: iota_acc+roughgrave,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.353 	circumflex					=:
                         iota_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.353 	circumflex					=: iota_acc+roughcirc;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.354 ligtable omikron_acc+rough:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.354 ligtable omikron_acc+rough:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.355 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.355 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.356 	iota_acc+rough				=:|
                             omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.356 	iota_acc+rough				=:| omikron,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.357 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.357 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.358 	upsilon_acc+rough			=:|
                               omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.358 	upsilon_acc+rough			=:| omikron,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.359 	apostrophe					=:
                         omikron_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.359 	apostrophe					=: omikron_acc+roughacute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.360 	backquote					=:
                        omikron_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.360 	backquote					=: omikron_acc+roughgrave,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.361 	circumflex					=:
                         omikron_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.361 	circumflex					=: omikron_acc+roughcirc;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.362 ligtable upsilon_acc+rough:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.362 ligtable upsilon_acc+rough:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.363 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.363 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.364 	iota_acc+rough				=:|
                             upsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.364 	iota_acc+rough				=:| upsilon,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.365 	apostrophe					=:
                         upsilon_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.365 	apostrophe					=: upsilon_acc+roughacute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.366 	backquote					=:
                        upsilon_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.366 	backquote					=: upsilon_acc+roughgrave,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.367 	circumflex					=:
                         upsilon_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.367 	circumflex					=: upsilon_acc+roughcirc;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.368 ligtable omega_acc+rough:
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.368 ligtable omega_acc+rough:
                               
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.369 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.369 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.370 	iota_acc+rough				=:|
                             omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.370 	iota_acc+rough				=:| omega,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.371 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.371 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.372 	upsilon_acc+rough			=:|
                               omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.372 	upsilon_acc+rough			=:| omega,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.373 	apostrophe					=:
                         omega_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.373 	apostrophe					=: omega_acc+roughacute,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.374 	backquote					=:
                        omega_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.374 	backquote					=: omega_acc+roughgrave,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.375 	circumflex					=:
                         omega_acc+roughcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.375 	circumflex					=: omega_acc+roughcirc,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.376 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.376 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.380 	apostrophe					=:
                         alpha_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.380 	apostrophe					=: alpha_acc+acute,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.381 	backquote					=:
                        alpha_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.381 	backquote					=: alpha_acc+grave,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.382 	circumflex					=:
                         alpha_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.382 	circumflex					=: alpha_acc+circ,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.383 	brevechar					=:
                        alpha_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.383 	brevechar					=: alpha_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.384 	macronchar					=:
                         alpha_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.384 	macronchar					=: alpha_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.385 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.385 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.386 ligtable epsilon:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.387 	apostrophe					=:
                         epsilon_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.387 	apostrophe					=: epsilon_acc+acute,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.388 	backquote					=:
                        epsilon_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.388 	backquote					=: epsilon_acc+grave,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.389 	circumflex					=:
                         epsilon_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.389 	circumflex					=: epsilon_acc+circ,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.390 	brevechar					=:
                        epsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.390 	brevechar					=: epsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.391 	macronchar					=:
                         epsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.391 	macronchar					=: epsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.392 ligtable eta:
                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.392 ligtable eta:
                   
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.393 	apostrophe					=:
                         eta_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.393 	apostrophe					=: eta_acc+acute,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.394 	backquote					=:
                        eta_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.394 	backquote					=: eta_acc+grave,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.395 	circumflex					=:
                         eta_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.395 	circumflex					=: eta_acc+circ,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.396 	brevechar					=:
                        eta_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.396 	brevechar					=: eta_acc+breve,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.397 	macronchar					=:
                         eta_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.397 	macronchar					=: eta_acc+macron,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.398 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.398 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.399 ligtable iota:
                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.399 ligtable iota:
                    
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.400 	apostrophe					=:
                         iota_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.400 	apostrophe					=: iota_acc+acute,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.401 	backquote					=:
                        iota_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.401 	backquote					=: iota_acc+grave,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.402 	circumflex					=:
                         iota_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.402 	circumflex					=: iota_acc+circ,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeresis
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.403 	diaeresis					=:
                        iota_acc+diaer,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.403 	diaeresis					=: iota_acc+diaer,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.404 	brevechar					=:
                        iota_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.404 	brevechar					=: iota_acc+breve,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.405 	macronchar					=:
                         iota_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.405 	macronchar					=: iota_acc+macron;
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.406 ligtable omikron:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.406 ligtable omikron:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.407 	apostrophe					=:
                         omikron_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.407 	apostrophe					=: omikron_acc+acute,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.408 	backquote					=:
                        omikron_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.408 	backquote					=: omikron_acc+grave,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.409 	circumflex					=:
                         omikron_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.409 	circumflex					=: omikron_acc+circ,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.410 	brevechar					=:
                        omikron_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.410 	brevechar					=: omikron_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.411 	macronchar					=:
                         omikron_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.411 	macronchar					=: omikron_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.412 ligtable upsilon:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.412 ligtable upsilon:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.413 	apostrophe					=:
                         upsilon_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.413 	apostrophe					=: upsilon_acc+acute,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.414 	backquote					=:
                        upsilon_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.414 	backquote					=: upsilon_acc+grave,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.415 	circumflex					=:
                         upsilon_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.415 	circumflex					=: upsilon_acc+circ,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeresis
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.416 	diaeresis					=:
                        upsilon_acc+diaer,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.416 	diaeresis					=: upsilon_acc+diaer,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.417 	brevechar					=:
                        upsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.417 	brevechar					=: upsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.418 	macronchar					=:
                         upsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.418 	macronchar					=: upsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.419 ligtable omega:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.419 ligtable omega:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.420 	apostrophe					=:
                         omega_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.420 	apostrophe					=: omega_acc+acute,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.421 	backquote					=:
                        omega_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.421 	backquote					=: omega_acc+grave,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.422 	circumflex					=:
                         omega_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.422 	circumflex					=: omega_acc+circ,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.423 	brevechar					=:
                        omega_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.423 	brevechar					=: omega_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.424 	macronchar					=:
                         omega_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.424 	macronchar					=: omega_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.425 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.425 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeresis
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.428 ligtable diaeresis:
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.428 ligtable diaeresis:
                         
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.429 	iota						=:
                    iota_acc+diaer,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.429 	iota						=: iota_acc+diaer,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.430 	upsilon						=:
                       upsilon_acc+diaer;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.430 	upsilon						=: upsilon_acc+diaer;
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.431 ligtable iota_acc+diaer:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.431 ligtable iota_acc+diaer:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.432 	apostrophe					=:
                         iota_acc+diaeracute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeracute+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.432 	apostrophe					=: iota_acc+diaeracute,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.433 	backquote					=:
                        iota_acc+diaergrave;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaergrave+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.433 	backquote					=: iota_acc+diaergrave;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.434 ligtable upsilon_acc+diaer:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.434 ligtable upsilon_acc+diaer:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.435 	apostrophe					=:
                         upsilon_acc+diaeracute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeracute+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.435 	apostrophe					=: upsilon_acc+diaeracute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.436 	backquote					=:
                        upsilon_acc+diaergrave;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaergrave+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.436 	backquote					=: upsilon_acc+diaergrave;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.440 	alpha_acc+acute:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.440 	alpha_acc+acute:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.441 	alpha_acc+grave:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.441 	alpha_acc+grave:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.442 	alpha_acc+circ:
                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.442 	alpha_acc+circ:
                      
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.443 	alpha_acc+smoothacute:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.443 	alpha_acc+smoothacute:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.444 	alpha_acc+smoothgrave:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.444 	alpha_acc+smoothgrave:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.445 	alpha_acc+smoothcirc:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.445 	alpha_acc+smoothcirc:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.446 	alpha_acc+roughacute:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.446 	alpha_acc+roughacute:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.447 	alpha_acc+roughgrave:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.447 	alpha_acc+roughgrave:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.448 	alpha_acc+roughcirc:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.448 	alpha_acc+roughcirc:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> breve+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.449 	alpha_acc+breve:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.449 	alpha_acc+breve:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> macron+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.450 	alpha_acc+macron:
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.450 	alpha_acc+macron:
                        
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.451 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.451 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.453 	eta_acc+acute:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.453 	eta_acc+acute:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.454 	eta_acc+grave:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.454 	eta_acc+grave:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.455 	eta_acc+circ:
                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.455 	eta_acc+circ:
                    
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.456 	eta_acc+smoothacute:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.456 	eta_acc+smoothacute:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.457 	eta_acc+smoothgrave:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.457 	eta_acc+smoothgrave:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.458 	eta_acc+smoothcirc:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.458 	eta_acc+smoothcirc:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.459 	eta_acc+roughacute:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.459 	eta_acc+roughacute:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.460 	eta_acc+roughgrave:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.460 	eta_acc+roughgrave:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.461 	eta_acc+roughcirc:
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.461 	eta_acc+roughcirc:
                         
It's not legal to label a character more than once.
So I'll not change anything just now.

>> breve+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.462 	eta_acc+breve:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.462 	eta_acc+breve:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> macron+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.463 	eta_acc+macron:
                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.463 	eta_acc+macron:
                      
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.464 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.464 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.466 	omega_acc+acute:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.466 	omega_acc+acute:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.467 	omega_acc+grave:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.467 	omega_acc+grave:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.468 	omega_acc+circ:
                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.468 	omega_acc+circ:
                      
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.469 	omega_acc+smoothacute:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.469 	omega_acc+smoothacute:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.470 	omega_acc+smoothgrave:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.470 	omega_acc+smoothgrave:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.471 	omega_acc+smoothcirc:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.471 	omega_acc+smoothcirc:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.472 	omega_acc+roughacute:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.472 	omega_acc+roughacute:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.473 	omega_acc+roughgrave:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.473 	omega_acc+roughgrave:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.474 	omega_acc+roughcirc:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.474 	omega_acc+roughcirc:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> breve+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.475 	omega_acc+breve:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.475 	omega_acc+breve:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> macron+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.476 	omega_acc+macron:
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.476 	omega_acc+macron:
                        
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.477 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.477 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

) (/usr/share/texmf-texlive/fonts/source/public/wnri/sktmisc.mf [225] [251])
(/usr/share/texmf-texlive/fonts/source/public/wnri/acctmax.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/odotacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [150] [143]
[240] [200]) (/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf
[217] [134] [167] [239] [205])
(/usr/share/texmf-texlive/fonts/source/public/wnri/udotacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [244] [255]
[175] [236] [253] [246] [232] [250] [242] [221])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [243] [254]
[174] [235] [252] [245] [231] [249] [241] [218])
(/usr/share/texmf-texlive/fonts/source/public/wnri/hattacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/orngacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/umlaacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [132] [137]
[139] [148] [129])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [142] [153]
[154]) (/usr/share/texmf-texlive/fonts/source/public/wnri/acutacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [160] [130]
[161] [162] [247] [163])
(/usr/share/texmf-texlive/fonts/source/public/lfb/ligature.mf
>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.111 ligtable sigma:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.111 ligtable sigma:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> -1
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.112 	boundarychar				=:|
                           sigmafinal,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigmafinal
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.112 	boundarychar				=:| sigmafinal,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> fullstop
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.113 	fullstop					=:|
                        sigmafinal,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigmafinal
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.113 	fullstop					=:| sigmafinal,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

! Missing argument to comma.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
That macro has more parameters than you thought.
I'll continue by pretending that each missing argument
is either zero or null.

>> pen
! Invalid code has been replaced by 0.
<to be read again> 
                   :=
numeric_pickup_->currentpen:=
                             pen_[(EXPR0)];pen_lft:=pen_lft_[(EXPR0)];pen_rt...
<to be read again> 
                   ;
comma->pickup.fine.nib;
                       pos(SUFFIX0)((EXPR2),90);if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Illegal ligtable step.
<to be read again> 
                   :=
numeric_pickup_->currentpen:=
                             pen_[(EXPR0)];pen_lft:=pen_lft_[(EXPR0)];pen_rt...
<to be read again> 
                   ;
comma->pickup.fine.nib;
                       pos(SUFFIX0)((EXPR2),90);if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I was looking for `=:' or `kern' here.

! Extra tokens will be flushed.
<to be read again> 
                   :=
<to be read again> 
                   :=
numeric_pickup_->currentpen:=
                             pen_[(EXPR0)];pen_lft:=pen_lft_[(EXPR0)];pen_rt...
<to be read again> 
                   ;
comma->pickup.fine.nib;
                       pos(SUFFIX0)((EXPR2),90);if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! bad pos.
<to be read again> 
                   ;
pos->...XPR3)<=currentbreadth:errmessage"bad pos";
                                                  fi.fi(x(SUFFIX2)r-x(SUFFIX...

comma->pickup.fine.nib;pos(SUFFIX0)((EXPR2),90)
                                               ;if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
(That was another `errmessage'.)

! Redundant equation.
<to be read again> 
                   ;
pos->...);x(SUFFIX2)=0.5(x(SUFFIX2)l+x(SUFFIX2)r);
                                                  y(SUFFIX2)=0.5(y(SUFFIX2)l...

comma->pickup.fine.nib;pos(SUFFIX0)((EXPR2),90)
                                               ;if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   endgroup
comma->pickup.fine.nib;pos(SUFFIX0)((EXPR2),90)
                                               ;if.square_dots:pos(SUFFIX0)'...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! bad pos.
<to be read again> 
                   ;
pos->...XPR3)<=currentbreadth:errmessage"bad pos";
                                                  fi.fi(x(SUFFIX2)r-x(SUFFIX...

comma->...;if.square_dots:pos(SUFFIX0)'((EXPR2),0)
                                                  ;z(SUFFIX0)'=z(SUFFIX0);do...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
(That was another `errmessage'.)

! Redundant equation.
<to be read again> 
                   ;
pos->...);x(SUFFIX2)=0.5(x(SUFFIX2)l+x(SUFFIX2)r);
                                                  y(SUFFIX2)=0.5(y(SUFFIX2)l...

comma->...;if.square_dots:pos(SUFFIX0)'((EXPR2),0)
                                                  ;z(SUFFIX0)'=z(SUFFIX0);do...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   endgroup
comma->...;if.square_dots:pos(SUFFIX0)'((EXPR2),0)
                                                  ;z(SUFFIX0)'=z(SUFFIX0);do...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> x.r+0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...if.square_dots:(x(SUFFIX0)l,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)l)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...if.square_dots:(x(SUFFIX0)l,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)l)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)l)--
                                                  (x(SUFFIX0)r,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)r)--
                                                  (x(SUFFIX0)l,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)l)--(x(SUFFIX0)r,y(SUFFIX1)r)--
                                                  (x(SUFFIX0)l,y(SUFFIX1)r)-...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r+0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)r)--(x(SUFFIX0)l,y(SUFFIX1)r)--
                                                  cycle.else:z(SUFFIX0)l...z...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
dot->...,y(SUFFIX1)r)--(x(SUFFIX0)l,y(SUFFIX1)r)--
                                                  cycle.else:z(SUFFIX0)l...z...

comma->...0)'=z(SUFFIX0);dot((SUFFIX0)',(SUFFIX0))
                                                  ;comma_join_:=max(fine.bre...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Redundant equation.
<to be read again> 
                   ;
pos->...);x(SUFFIX2)=0.5(x(SUFFIX2)l+x(SUFFIX2)r);
                                                  y(SUFFIX2)=0.5(y(SUFFIX2)l...

comma->...0.5(EXPR2));pos(SUFFIX1)0(comma_join_,0)
                                                  ;pos(SUFFIX1)1(comma_join_...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   endgroup
comma->...0.5(EXPR2));pos(SUFFIX1)0(comma_join_,0)
                                                  ;pos(SUFFIX1)1(comma_join_...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
pos->...);x(SUFFIX2)=0.5(x(SUFFIX2)l+x(SUFFIX2)r);
                                                  y(SUFFIX2)=0.5(y(SUFFIX2)l...

comma->...ma_join_,0);pos(SUFFIX1)1(comma_join_,0)
                                                  ;pos(SUFFIX1)2(comma_bot_,...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   endgroup
comma->...ma_join_,0);pos(SUFFIX1)1(comma_join_,0)
                                                  ;pos(SUFFIX1)2(comma_bot_,...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
pos->...);x(SUFFIX2)=0.5(x(SUFFIX2)l+x(SUFFIX2)r);
                                                  y(SUFFIX2)=0.5(y(SUFFIX2)l...

comma->...mma_join_,0);pos(SUFFIX1)2(comma_bot_,0)
                                                  ;y(SUFFIX1)0=y(SUFFIX0);y(...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   endgroup
comma->...mma_join_,0);pos(SUFFIX1)2(comma_bot_,0)
                                                  ;y(SUFFIX1)0=y(SUFFIX0);y(...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
comma->...)2(comma_bot_,0);y(SUFFIX1)0=y(SUFFIX0);
                                                  y(SUFFIX1)1=y(SUFFIX0)l;y(...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
comma->...X1)0=y(SUFFIX0);y(SUFFIX1)1=y(SUFFIX0)l;
                                                  y(SUFFIX1)2=y(SUFFIX1)1-(E...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
comma->...FFIX0)l;y(SUFFIX1)2=y(SUFFIX1)1-(EXPR4);
                                                  x(SUFFIX1)0r=x(SUFFIX1)1r=...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
comma->...;x(SUFFIX1)0r=x(SUFFIX1)1r=x(SUFFIX0)'r;
                                                  rt.x(SUFFIX1)2r=good.x(x(S...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
comma->...;x(SUFFIX1)0r=x(SUFFIX1)1r=x(SUFFIX0)'r;
                                                  rt.x(SUFFIX1)2r=good.x(x(S...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> x.r-0.00049
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
comma->...;rt.x(SUFFIX1)2r=good.x(x(SUFFIX0)-eps);
                                                  filldraw.stroke.z(SUFFIX1)...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

! Redundant equation.
<to be read again> 
                   ;
comma->...;rt.x(SUFFIX1)2r=good.x(x(SUFFIX0)-eps);
                                                  filldraw.stroke.z(SUFFIX1)...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> x.r-0.50024
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.49976
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.50024
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(l)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(l)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.00098
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.49976
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> path_(SUFFIX0):=z0(SUFFIX0)--
                                      z1(SUFFIX0)..z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.49976
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(r)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(r)> ..._(SUFFIX0):=z0(SUFFIX0)--z1(SUFFIX0)..
                                                  z2(SUFFIX0); ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x.r-0.00049
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y.r+0.99951
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...z0(SUFFIX0)--z1(SUFFIX0)..z2(SUFFIX0);
                                                   ENDFOR
stroke->...rsuffixes.e=l,r:path_.e:=(TEXT2);endfor
                                                  .if.cycle.path_.l:errmessa...
<to be read again> 
                   ;
comma->...(SUFFIX1)0e--z(SUFFIX1)1e..z(SUFFIX1)2e;
                                                  else:pos(SUFFIX1)1(vair,90...
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! A statement can't begin with `=:|'.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I was looking for the beginning of a new statement.
If you just proceed without changing anything, I'll ignore
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   =:|
l.114 	comma						=:|
                      sigmafinal,
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> kappa
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.123 ligtable kappa:
                      gamma: khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.123 ligtable kappa:
                      gamma: khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> gamma
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.123 ligtable kappa: gamma:
                             khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.123 ligtable kappa: gamma:
                             khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> khi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.123 ligtable kappa: gamma: khi:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.123 ligtable kappa: gamma: khi:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.124 	aspirate					=:
                       khi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> khi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.124 	aspirate					=: khi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.125 	sigma						=:
                     xi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> xi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.125 	sigma						=: xi;
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> tau
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.126 ligtable tau:
                    delta: theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.126 ligtable tau:
                    delta: theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> (0,0)
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.126 ligtable tau: delta:
                           theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.126 ligtable tau: delta:
                           theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.127 	aspirate					=:
                       theta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> pi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.128 ligtable pi:
                   beta: phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.128 ligtable pi:
                   beta: phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> beta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.128 ligtable pi: beta:
                         phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.128 ligtable pi: beta:
                         phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> phi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.128 ligtable pi: beta: phi:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.128 ligtable pi: beta: phi:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.129 	aspirate					=:
                       phi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> phi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.129 	aspirate					=: phi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.130 	sigma						=:
                     psi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> psi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.130 	sigma						=: psi;
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Kappa
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.131 ligtable Kappa:
                      Gamma: Khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.131 ligtable Kappa:
                      Gamma: Khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Gamma
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma:
                             Khi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma:
                             Khi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Khi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma: Khi:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.131 ligtable Kappa: Gamma: Khi:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.132 	aspirate					=:
                       Khi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Khi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.132 	aspirate					=: Khi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.133 	Aspirate					=:
                       Khi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Khi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.133 	Aspirate					=: Khi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.134 	sigma						=:
                     Xi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Xi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.134 	sigma						=: Xi,
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.135 	Sigma						=:
                     Xi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Xi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.135 	Sigma						=: Xi;
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Tau
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.136 ligtable Tau:
                    Delta: Theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.136 ligtable Tau:
                    Delta: Theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Delta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.136 ligtable Tau: Delta:
                           Theta:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.136 ligtable Tau: Delta:
                           Theta:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Theta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.136 ligtable Tau: Delta: Theta:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.136 ligtable Tau: Delta: Theta:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.137 	aspirate					=:
                       Theta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Theta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.137 	aspirate					=: Theta,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.138 	Aspirate					=:
                       Theta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Theta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.138 	Aspirate					=: Theta;
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Pi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.139 ligtable Pi:
                   Beta: Phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.139 ligtable Pi:
                   Beta: Phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Beta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.139 ligtable Pi: Beta:
                         Phi:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.139 ligtable Pi: Beta:
                         Phi:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Phi
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.139 ligtable Pi: Beta: Phi:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.139 ligtable Pi: Beta: Phi:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.140 	aspirate					=:
                       Phi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Phi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.140 	aspirate					=: Phi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.141 	Aspirate					=:
                       Phi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Phi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.141 	Aspirate					=: Phi,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.142 	sigma						=:
                     Psi,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Psi
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.142 	sigma						=: Psi,
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Sigma
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.143 	Sigma						=:
                     Psi;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Psi
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.143 	Sigma						=: Psi;
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.147 	smooth:
              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.147 	smooth:
              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.148 	rough:
             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.148 	rough:
             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.149 	acute:
             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.149 	acute:
             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.150 	grave:
             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.150 	grave:
             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.151 	circ:
            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.151 	circ:
            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.152 	smoothacute:
                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.152 	smoothacute:
                   
It's not legal to label a character more than once.
So I'll not change anything just now.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.153 	smoothgrave:
                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.153 	smoothgrave:
                   
It's not legal to label a character more than once.
So I'll not change anything just now.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.154 	smoothcirc:
                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.154 	smoothcirc:
                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.155 	roughacute:
                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.155 	roughacute:
                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.156 	roughgrave:
                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.156 	roughgrave:
                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.157 	roughcirc:
                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.157 	roughcirc:
                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   kern
l.158 	Alpha						kern
                       -2letterspace#;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -0.06454extra
! Improper kern.
<to be read again> 
                   ;
l.158 	Alpha						kern -2letterspace#;
                                      
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.162 ligtable apostrophe:
                           apostrophe kern -2.5letterspace#, skipto 2;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.162 ligtable apostrophe:
                           apostrophe kern -2.5letterspace#, skipto 2;
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   kern
l.162 ligtable apostrophe: apostrophe kern
                                           -2.5letterspace#, skipto 2;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -0.08067extra
! Improper kern.
<to be read again> 
                   ,
l.162 ...trophe: apostrophe kern -2.5letterspace#,
                                                   skipto 2;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.163 ligtable backquote:
                          backquote kern -2.5letterspace#, skipto 3;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.163 ligtable backquote:
                          backquote kern -2.5letterspace#, skipto 3;
It's not legal to label a character more than once.
So I'll not change anything just now.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   kern
l.163 ligtable backquote: backquote kern
                                         -2.5letterspace#, skipto 3;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> -0.08067extra
! Improper kern.
<to be read again> 
                   ,
l.163 ...ckquote: backquote kern -2.5letterspace#,
                                                   skipto 3;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> hyphen
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.167 ligtable hyphen:
                       hyphen			=: emdash;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.167 ligtable hyphen:
                       hyphen			=: emdash;
It's not legal to label a character more than once.
So I'll not change anything just now.

>> hyphen
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.167 ligtable hyphen: hyphen			=:
                                   emdash;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> emdash
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.167 ligtable hyphen: hyphen			=: emdash;
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.172 	Alpha						=:|
                      smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.172 	Alpha						=:| smoothacute,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.173 	Epsilon						=:|
                        smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.173 	Epsilon						=:| smoothacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.174 	Eta							=:|
                     smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.174 	Eta							=:| smoothacute,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.175 	Iota						=:|
                     smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.175 	Iota						=:| smoothacute,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.176 	Omikron						=:|
                        smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.176 	Omikron						=:| smoothacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.177 	Upsilon						=:|
                        smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.177 	Upsilon						=:| smoothacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.178 	Omega						=:|
                      smoothacute;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.178 	Omega						=:| smoothacute;
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.180 	Alpha						=:|
                      smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.180 	Alpha						=:| smoothgrave,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.181 	Epsilon						=:|
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.181 	Epsilon						=:| smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.182 	Eta							=:|
                     smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.182 	Eta							=:| smoothgrave,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.183 	Iota						=:|
                     smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.183 	Iota						=:| smoothgrave,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.184 	Omikron						=:|
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.184 	Omikron						=:| smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.185 	Upsilon						=:|
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.185 	Upsilon						=:| smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.186 	Omega						=:|
                      smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.186 	Omega						=:| smoothgrave,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> coronis
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.188 ligtable coronis:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.188 ligtable coronis:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.189 	apostrophe					=:
                         smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.189 	apostrophe					=: smoothacute,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.190 	backquote					=:
                        smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.190 	backquote					=: smoothgrave,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.191 	circumflex					=:
                         smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.191 	circumflex					=: smoothcirc,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.192 	alpha						=: alpha_acc+smooth,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.193 	epsilon						=: epsilon_acc+smooth,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.194 	eta							=:
                    eta_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.194 	eta							=: eta_acc+smooth,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.195 	iota						=:
                    iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.195 	iota						=: iota_acc+smooth,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.196 	omikron						=:
                       omikron_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.196 	omikron						=: omikron_acc+smooth,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.197 	upsilon						=:
                       upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.197 	upsilon						=: upsilon_acc+smooth,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.198 	omega						=:
                     omega_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.198 	omega						=: omega_acc+smooth,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.199 	rho							=:
                    rho_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.199 	rho							=: rho_acc+smooth,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.200 	Alpha						=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.200 	Alpha						=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.201 	Epsilon						=:|
                        smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.201 	Epsilon						=:| smooth,
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.202 	Eta							=:|
                     smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.202 	Eta							=:| smooth,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.203 	Iota						=:|
                     smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.203 	Iota						=:| smooth,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.204 	Omikron						=:|
                        smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.204 	Omikron						=:| smooth,
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.205 	Upsilon						=:|
                        smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.205 	Upsilon						=:| smooth,
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.206 	Omega						=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.206 	Omega						=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.207 	Rho							=:|
                     smooth;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.207 	Rho							=:| smooth;
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> openparenthesis
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis:
                                    emdash: 1::
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis:
                                    emdash: 1::
It's not legal to label a character more than once.
So I'll not change anything just now.

>> emdash
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis: emdash:
                                            1::
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.208 ligtable ||: openparenthesis: emdash:
                                            1::
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.209 	alpha						|=: alpha_acc+smooth,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.210 	epsilon						|=: epsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.211 	eta							|=:
                     eta_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.211 	eta							|=: eta_acc+smooth,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.212 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.212 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.213 	omikron						|=:
                        omikron_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.213 	omikron						|=: omikron_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.214 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.214 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.215 	omega						|=:
                      omega_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.215 	omega						|=: omega_acc+smooth,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.216 	rho							|=:
                     rho_acc+rough,	% initial rho should be rough
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.216 	rho							|=: rho_acc+rough,
                                   	% initial rho should be rough
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.217 	Alpha						|=:|
                       smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.217 	Alpha						|=:| smooth,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.218 	Epsilon						|=:|
                         smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.218 	Epsilon						|=:| smooth,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.219 	Eta							|=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.219 	Eta							|=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.220 	Iota						|=:|
                      smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.220 	Iota						|=:| smooth,
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.221 	Omikron						|=:|
                         smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.221 	Omikron						|=:| smooth,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.222 	Upsilon						|=:|
                         smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.222 	Upsilon						|=:| smooth,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.223 	Omega						|=:|
                       smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.223 	Omega						|=:| smooth,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Rho
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:|
l.224 	Rho							|=:|
                      rough;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.224 	Rho							|=:| rough;
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.225 ligtable circumflex:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.225 ligtable circumflex:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.226 	Alpha						=:|
                      smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.226 	Alpha						=:| smoothcirc,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.227 	Epsilon						=:|
                        smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.227 	Epsilon						=:| smoothcirc,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.228 	Eta							=:|
                     smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.228 	Eta							=:| smoothcirc,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.229 	Iota						=:|
                     smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.229 	Iota						=:| smoothcirc,
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.230 	Omikron						=:|
                        smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.230 	Omikron						=:| smoothcirc,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.231 	Upsilon						=:|
                        smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.231 	Upsilon						=:| smoothcirc,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.232 	Omega						=:|
                      smoothcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.232 	Omega						=:| smoothcirc;
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.233 ligtable alpha_acc+smooth:
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.233 ligtable alpha_acc+smooth:
                                
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.234 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.234 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.235 	iota_acc+smooth				=:|
                              alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.236 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.236 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.237 	upsilon_acc+smooth			=:|
                                alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.238 	apostrophe					=:
                         alpha_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.238 	apostrophe					=: alpha_acc+smoothacute,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.239 	backquote					=:
                        alpha_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.239 	backquote					=: alpha_acc+smoothgrave,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.240 	circumflex					=:
                         alpha_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.240 	circumflex					=: alpha_acc+smoothcirc,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.241 	brevechar					=:
                        alpha_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.241 	brevechar					=: alpha_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.242 	macronchar					=:
                         alpha_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.242 	macronchar					=: alpha_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.243 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.243 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.244 ligtable epsilon_acc+smooth:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.244 ligtable epsilon_acc+smooth:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.245 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.245 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.246 	iota_acc+smooth				=:|
                              epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.247 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.247 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.248 	upsilon_acc+smooth			=:|
                                epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.249 	apostrophe					=:
                         epsilon_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.249 	apostrophe					=: epsilon_acc+smoothacute,
                                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.250 	backquote					=:
                        epsilon_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.250 	backquote					=: epsilon_acc+smoothgrave,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.251 	circumflex					=:
                         epsilon_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.251 	circumflex					=: epsilon_acc+smoothcirc,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.252 	brevechar					=:
                        epsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.252 	brevechar					=: epsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.253 	macronchar					=:
                         epsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.253 	macronchar					=: epsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.254 ligtable eta_acc+smooth:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.254 ligtable eta_acc+smooth:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.255 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.255 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.256 	iota_acc+smooth				=:|
                              eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.256 	iota_acc+smooth				=:| eta,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.257 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.257 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.258 	upsilon_acc+smooth			=:|
                                eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.258 	upsilon_acc+smooth			=:| eta,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.259 	apostrophe					=:
                         eta_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.259 	apostrophe					=: eta_acc+smoothacute,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.260 	backquote					=:
                        eta_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.260 	backquote					=: eta_acc+smoothgrave,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.261 	circumflex					=:
                         eta_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.261 	circumflex					=: eta_acc+smoothcirc,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.262 	brevechar					=:
                        eta_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.262 	brevechar					=: eta_acc+breve,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.263 	macronchar					=:
                         eta_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.263 	macronchar					=: eta_acc+macron,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.264 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.264 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.265 ligtable iota_acc+smooth:
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.265 ligtable iota_acc+smooth:
                               
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.266 	apostrophe					=:
                         iota_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.266 	apostrophe					=: iota_acc+smoothacute,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.267 	backquote					=:
                        iota_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.267 	backquote					=: iota_acc+smoothgrave,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.268 	circumflex					=:
                         iota_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.268 	circumflex					=: iota_acc+smoothcirc,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.269 	brevechar					=:
                        iota_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.269 	brevechar					=: iota_acc+breve,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.270 	macronchar					=:
                         iota_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.270 	macronchar					=: iota_acc+macron;
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.271 ligtable omikron_acc+smooth:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.271 ligtable omikron_acc+smooth:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.272 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.272 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.273 	iota_acc+smooth				=:|
                              omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.273 	iota_acc+smooth				=:| omikron,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.274 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.274 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.275 	upsilon_acc+smooth			=:|
                                omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.275 	upsilon_acc+smooth			=:| omikron,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.276 	apostrophe					=:
                         omikron_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.276 	apostrophe					=: omikron_acc+smoothacute,
                                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.277 	backquote					=:
                        omikron_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.277 	backquote					=: omikron_acc+smoothgrave,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.278 	circumflex					=:
                         omikron_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.278 	circumflex					=: omikron_acc+smoothcirc,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.279 	brevechar					=:
                        omikron_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.279 	brevechar					=: omikron_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.280 	macronchar					=:
                         omikron_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.280 	macronchar					=: omikron_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.281 ligtable upsilon_acc+smooth:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.281 ligtable upsilon_acc+smooth:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.282 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.282 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.283 	iota_acc+smooth				=:|
                              upsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.283 	iota_acc+smooth				=:| upsilon,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.284 	apostrophe					=:
                         upsilon_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.284 	apostrophe					=: upsilon_acc+smoothacute,
                                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.285 	backquote					=:
                        upsilon_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.285 	backquote					=: upsilon_acc+smoothgrave,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.286 	circumflex					=:
                         upsilon_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.286 	circumflex					=: upsilon_acc+smoothcirc,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.287 	brevechar					=:
                        upsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.287 	brevechar					=: upsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.288 	macronchar					=:
                         upsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.288 	macronchar					=: upsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.289 ligtable omega_acc+smooth:
                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.289 ligtable omega_acc+smooth:
                                
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.290 	iota						|=:
                     iota_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.290 	iota						|=: iota_acc+smooth,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.291 	iota_acc+smooth				=:|
                              omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.291 	iota_acc+smooth				=:| omega,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.292 	upsilon						|=:
                        upsilon_acc+smooth,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.292 	upsilon						|=: upsilon_acc+smooth,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.293 	upsilon_acc+smooth			=:|
                                omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.293 	upsilon_acc+smooth			=:| omega,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.294 	apostrophe					=:
                         omega_acc+smoothacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.294 	apostrophe					=: omega_acc+smoothacute,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.295 	backquote					=:
                        omega_acc+smoothgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.295 	backquote					=: omega_acc+smoothgrave,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.296 	circumflex					=:
                         omega_acc+smoothcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.296 	circumflex					=: omega_acc+smoothcirc,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.297 	brevechar					=:
                        omega_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.297 	brevechar					=: omega_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.298 	macronchar					=:
                         omega_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.298 	macronchar					=: omega_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.299 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.299 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+smooth
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.300 ligtable rho_acc+smooth:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.300 ligtable rho_acc+smooth:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.301 	rho							|=:
                     rho_acc+rough;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.301 	rho							|=: rho_acc+rough;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.304 ligtable aspirate:
                         Aspirate:
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.304 ligtable aspirate:
                         Aspirate:
It's not legal to label a character more than once.
So I'll not change anything just now.

>> Aspirate
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.304 ligtable aspirate: Aspirate:
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.304 ligtable aspirate: Aspirate:
                                  
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.305 	alpha						=: alpha_acc+rough,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.306 	epsilon						=: epsilon_acc+rough,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.307 	eta							=:
                    eta_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.307 	eta							=: eta_acc+rough,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.308 	iota						=:
                    iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.308 	iota						=: iota_acc+rough,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.309 	omikron						=:
                       omikron_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.309 	omikron						=: omikron_acc+rough,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.310 	upsilon						=:
                       upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.310 	upsilon						=: upsilon_acc+rough,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.311 	omega						=:
                     omega_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.311 	omega						=: omega_acc+rough,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.312 	rho							=:
                    rho_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rho_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.312 	rho							=: rho_acc+rough,
                                  
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Alpha
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.313 	Alpha						=:|
                      rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.313 	Alpha						=:| rough,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Epsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.314 	Epsilon						=:|
                        rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.314 	Epsilon						=:| rough,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Eta
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.315 	Eta							=:|
                     rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.315 	Eta							=:| rough,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.316 	Iota						=:|
                     rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.316 	Iota						=:| rough,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.317 	Omikron						=:|
                        rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.317 	Omikron						=:| rough,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.318 	Upsilon						=:|
                        rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.318 	Upsilon						=:| rough,
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Omega
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.319 	Omega						=:|
                      rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.319 	Omega						=:| rough,
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> Rho
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.320 	Rho							=:|
                     rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.320 	Rho							=:| rough,
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.321 	apostrophe					=:
                         roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.321 	apostrophe					=: roughacute,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.322 	backquote					=:
                        roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.322 	backquote					=: roughgrave,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.323 	circumflex					=:
                         roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.323 	circumflex					=: roughcirc;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.324 ligtable alpha_acc+rough:
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.324 ligtable alpha_acc+rough:
                               
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.325 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.325 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.326 	iota_acc+rough				=:|
                             alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.327 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.327 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.328 	upsilon_acc+rough			=:|
                               alpha,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.329 	apostrophe					=:
                         alpha_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.329 	apostrophe					=: alpha_acc+roughacute,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.330 	backquote					=:
                        alpha_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.330 	backquote					=: alpha_acc+roughgrave,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.331 	circumflex					=:
                         alpha_acc+roughcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.331 	circumflex					=: alpha_acc+roughcirc,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.332 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.332 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.333 ligtable epsilon_acc+rough:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.333 ligtable epsilon_acc+rough:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.334 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.334 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.335 	iota_acc+rough				=:|
                             epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.336 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.336 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.337 	upsilon_acc+rough			=:|
                               epsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.338 	apostrophe					=:
                         epsilon_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.338 	apostrophe					=: epsilon_acc+roughacute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.339 	backquote					=:
                        epsilon_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.339 	backquote					=: epsilon_acc+roughgrave,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.340 	circumflex					=:
                         epsilon_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.340 	circumflex					=: epsilon_acc+roughcirc;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.341 ligtable eta_acc+rough:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.341 ligtable eta_acc+rough:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.342 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.342 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.343 	iota_acc+rough				=:|
                             eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.343 	iota_acc+rough				=:| eta,
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.344 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.344 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.345 	upsilon_acc+rough			=:|
                               eta,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.345 	upsilon_acc+rough			=:| eta,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.346 	apostrophe					=:
                         eta_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.346 	apostrophe					=: eta_acc+roughacute,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.347 	backquote					=:
                        eta_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.347 	backquote					=: eta_acc+roughgrave,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.348 	circumflex					=:
                         eta_acc+roughcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.348 	circumflex					=: eta_acc+roughcirc,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.349 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.349 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.350 ligtable iota_acc+rough:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.350 ligtable iota_acc+rough:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.351 	apostrophe					=:
                         iota_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.351 	apostrophe					=: iota_acc+roughacute,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.352 	backquote					=:
                        iota_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.352 	backquote					=: iota_acc+roughgrave,
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.353 	circumflex					=:
                         iota_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.353 	circumflex					=: iota_acc+roughcirc;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.354 ligtable omikron_acc+rough:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.354 ligtable omikron_acc+rough:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.355 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.355 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.356 	iota_acc+rough				=:|
                             omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.356 	iota_acc+rough				=:| omikron,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.357 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.357 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.358 	upsilon_acc+rough			=:|
                               omikron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.358 	upsilon_acc+rough			=:| omikron,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.359 	apostrophe					=:
                         omikron_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.359 	apostrophe					=: omikron_acc+roughacute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.360 	backquote					=:
                        omikron_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.360 	backquote					=: omikron_acc+roughgrave,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.361 	circumflex					=:
                         omikron_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.361 	circumflex					=: omikron_acc+roughcirc;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.362 ligtable upsilon_acc+rough:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.362 ligtable upsilon_acc+rough:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.363 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.363 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.364 	iota_acc+rough				=:|
                             upsilon,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.364 	iota_acc+rough				=:| upsilon,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.365 	apostrophe					=:
                         upsilon_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.365 	apostrophe					=: upsilon_acc+roughacute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.366 	backquote					=:
                        upsilon_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.366 	backquote					=: upsilon_acc+roughgrave,
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.367 	circumflex					=:
                         upsilon_acc+roughcirc;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.367 	circumflex					=: upsilon_acc+roughcirc;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.368 ligtable omega_acc+rough:
                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.368 ligtable omega_acc+rough:
                               
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.369 	iota						|=:
                     iota_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.369 	iota						|=: iota_acc+rough,
                                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.370 	iota_acc+rough				=:|
                             omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.370 	iota_acc+rough				=:| omega,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.371 	upsilon						|=:
                        upsilon_acc+rough,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.371 	upsilon						|=: upsilon_acc+rough,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+rough
! Invalid code has been replaced by 0.
<to be read again> 
                   =:|
l.372 	upsilon_acc+rough			=:|
                               omega,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.372 	upsilon_acc+rough			=:| omega,
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.373 	apostrophe					=:
                         omega_acc+roughacute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.373 	apostrophe					=: omega_acc+roughacute,
                                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.374 	backquote					=:
                        omega_acc+roughgrave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.374 	backquote					=: omega_acc+roughgrave,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.375 	circumflex					=:
                         omega_acc+roughcirc,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.375 	circumflex					=: omega_acc+roughcirc,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.376 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.376 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 1 is already in a ligtable.
<to be read again> 
                   :
l.379 ligtable alpha:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.380 	apostrophe					=:
                         alpha_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.380 	apostrophe					=: alpha_acc+acute,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.381 	backquote					=:
                        alpha_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.381 	backquote					=: alpha_acc+grave,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.382 	circumflex					=:
                         alpha_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.382 	circumflex					=: alpha_acc+circ,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.383 	brevechar					=:
                        alpha_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.383 	brevechar					=: alpha_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.384 	macronchar					=:
                         alpha_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.384 	macronchar					=: alpha_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.385 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.385 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.386 ligtable epsilon:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.387 	apostrophe					=:
                         epsilon_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.387 	apostrophe					=: epsilon_acc+acute,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.388 	backquote					=:
                        epsilon_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.388 	backquote					=: epsilon_acc+grave,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.389 	circumflex					=:
                         epsilon_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> epsilon_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.389 	circumflex					=: epsilon_acc+circ,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.390 	brevechar					=:
                        epsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.390 	brevechar					=: epsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.391 	macronchar					=:
                         epsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+epsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.391 	macronchar					=: epsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.392 ligtable eta:
                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.392 ligtable eta:
                   
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.393 	apostrophe					=:
                         eta_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.393 	apostrophe					=: eta_acc+acute,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.394 	backquote					=:
                        eta_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.394 	backquote					=: eta_acc+grave,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.395 	circumflex					=:
                         eta_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.395 	circumflex					=: eta_acc+circ,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.396 	brevechar					=:
                        eta_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.396 	brevechar					=: eta_acc+breve,
                                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.397 	macronchar					=:
                         eta_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.397 	macronchar					=: eta_acc+macron,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.398 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.398 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.399 ligtable iota:
                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.399 ligtable iota:
                    
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.400 	apostrophe					=:
                         iota_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.400 	apostrophe					=: iota_acc+acute,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.401 	backquote					=:
                        iota_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.401 	backquote					=: iota_acc+grave,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.402 	circumflex					=:
                         iota_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iota_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.402 	circumflex					=: iota_acc+circ,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeresis
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.403 	diaeresis					=:
                        iota_acc+diaer,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.403 	diaeresis					=: iota_acc+diaer,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.404 	brevechar					=:
                        iota_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.404 	brevechar					=: iota_acc+breve,
                                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.405 	macronchar					=:
                         iota_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.405 	macronchar					=: iota_acc+macron;
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.406 ligtable omikron:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.406 ligtable omikron:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.407 	apostrophe					=:
                         omikron_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.407 	apostrophe					=: omikron_acc+acute,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.408 	backquote					=:
                        omikron_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.408 	backquote					=: omikron_acc+grave,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.409 	circumflex					=:
                         omikron_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omikron_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.409 	circumflex					=: omikron_acc+circ,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.410 	brevechar					=:
                        omikron_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.410 	brevechar					=: omikron_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.411 	macronchar					=:
                         omikron_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omikron_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.411 	macronchar					=: omikron_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.412 ligtable upsilon:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.412 ligtable upsilon:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.413 	apostrophe					=:
                         upsilon_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.413 	apostrophe					=: upsilon_acc+acute,
                                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.414 	backquote					=:
                        upsilon_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.414 	backquote					=: upsilon_acc+grave,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.415 	circumflex					=:
                         upsilon_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.415 	circumflex					=: upsilon_acc+circ,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeresis
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.416 	diaeresis					=:
                        upsilon_acc+diaer,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.416 	diaeresis					=: upsilon_acc+diaer,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.417 	brevechar					=:
                        upsilon_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.417 	brevechar					=: upsilon_acc+breve,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.418 	macronchar					=:
                         upsilon_acc+macron;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.418 	macronchar					=: upsilon_acc+macron;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.419 ligtable omega:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.419 ligtable omega:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.420 	apostrophe					=:
                         omega_acc+acute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.420 	apostrophe					=: omega_acc+acute,
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.421 	backquote					=:
                        omega_acc+grave,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.421 	backquote					=: omega_acc+grave,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> circumflex
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.422 	circumflex					=:
                         omega_acc+circ,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.422 	circumflex					=: omega_acc+circ,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> brevechar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.423 	brevechar					=:
                        omega_acc+breve,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> breve+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.423 	brevechar					=: omega_acc+breve,
                                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macronchar
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.424 	macronchar					=:
                         omega_acc+macron,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> macron+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.424 	macronchar					=: omega_acc+macron,
                                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.425 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.425 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeresis
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.428 ligtable diaeresis:
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.428 ligtable diaeresis:
                         
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iota
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.429 	iota						=:
                    iota_acc+diaer,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.429 	iota						=: iota_acc+diaer,
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> upsilon
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.430 	upsilon						=:
                       upsilon_acc+diaer;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.430 	upsilon						=: upsilon_acc+diaer;
                                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.431 ligtable iota_acc+diaer:
                              
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.431 ligtable iota_acc+diaer:
                              
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.432 	apostrophe					=:
                         iota_acc+diaeracute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeracute+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.432 	apostrophe					=: iota_acc+diaeracute,
                                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.433 	backquote					=:
                        iota_acc+diaergrave;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaergrave+iota_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.433 	backquote					=: iota_acc+diaergrave;
                                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaer+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.434 ligtable upsilon_acc+diaer:
                                 
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.434 ligtable upsilon_acc+diaer:
                                 
It's not legal to label a character more than once.
So I'll not change anything just now.

>> apostrophe
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.435 	apostrophe					=:
                         upsilon_acc+diaeracute,
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaeracute+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ,
l.435 	apostrophe					=: upsilon_acc+diaeracute,
                                                
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> backquote
! Invalid code has been replaced by 0.
<to be read again> 
                   =:
l.436 	backquote					=:
                        upsilon_acc+diaergrave;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> diaergrave+upsilon_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.436 	backquote					=: upsilon_acc+diaergrave;
                                               
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> alpha_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.440 	alpha_acc+acute:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.440 	alpha_acc+acute:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.441 	alpha_acc+grave:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.441 	alpha_acc+grave:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.442 	alpha_acc+circ:
                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.442 	alpha_acc+circ:
                      
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.443 	alpha_acc+smoothacute:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.443 	alpha_acc+smoothacute:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.444 	alpha_acc+smoothgrave:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.444 	alpha_acc+smoothgrave:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.445 	alpha_acc+smoothcirc:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.445 	alpha_acc+smoothcirc:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.446 	alpha_acc+roughacute:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.446 	alpha_acc+roughacute:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.447 	alpha_acc+roughgrave:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.447 	alpha_acc+roughgrave:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> alpha_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.448 	alpha_acc+roughcirc:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.448 	alpha_acc+roughcirc:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> breve+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.449 	alpha_acc+breve:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.449 	alpha_acc+breve:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> macron+alpha_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.450 	alpha_acc+macron:
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.450 	alpha_acc+macron:
                        
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.451 	iotasub						|=:
                        iotasubalpha;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubalpha
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.451 	iotasub						|=: iotasubalpha;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> eta_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.453 	eta_acc+acute:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.453 	eta_acc+acute:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.454 	eta_acc+grave:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.454 	eta_acc+grave:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.455 	eta_acc+circ:
                    
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.455 	eta_acc+circ:
                    
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.456 	eta_acc+smoothacute:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.456 	eta_acc+smoothacute:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.457 	eta_acc+smoothgrave:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.457 	eta_acc+smoothgrave:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.458 	eta_acc+smoothcirc:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.458 	eta_acc+smoothcirc:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.459 	eta_acc+roughacute:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.459 	eta_acc+roughacute:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.460 	eta_acc+roughgrave:
                          
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.460 	eta_acc+roughgrave:
                          
It's not legal to label a character more than once.
So I'll not change anything just now.

>> eta_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.461 	eta_acc+roughcirc:
                         
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.461 	eta_acc+roughcirc:
                         
It's not legal to label a character more than once.
So I'll not change anything just now.

>> breve+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.462 	eta_acc+breve:
                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.462 	eta_acc+breve:
                     
It's not legal to label a character more than once.
So I'll not change anything just now.

>> macron+eta_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.463 	eta_acc+macron:
                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.463 	eta_acc+macron:
                      
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.464 	iotasub						|=:
                        iotasubeta;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubeta
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.464 	iotasub						|=: iotasubeta;
                                   
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> omega_acc+acute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.466 	omega_acc+acute:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.466 	omega_acc+acute:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+grave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.467 	omega_acc+grave:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.467 	omega_acc+grave:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+circ
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.468 	omega_acc+circ:
                      
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.468 	omega_acc+circ:
                      
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+smoothacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.469 	omega_acc+smoothacute:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.469 	omega_acc+smoothacute:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+smoothgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.470 	omega_acc+smoothgrave:
                             
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.470 	omega_acc+smoothgrave:
                             
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+smoothcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.471 	omega_acc+smoothcirc:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.471 	omega_acc+smoothcirc:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+roughacute
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.472 	omega_acc+roughacute:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.472 	omega_acc+roughacute:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+roughgrave
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.473 	omega_acc+roughgrave:
                            
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.473 	omega_acc+roughgrave:
                            
It's not legal to label a character more than once.
So I'll not change anything just now.

>> omega_acc+roughcirc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.474 	omega_acc+roughcirc:
                           
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.474 	omega_acc+roughcirc:
                           
It's not legal to label a character more than once.
So I'll not change anything just now.

>> breve+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.475 	omega_acc+breve:
                       
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.475 	omega_acc+breve:
                       
It's not legal to label a character more than once.
So I'll not change anything just now.

>> macron+omega_acc
! Invalid code has been replaced by 0.
<to be read again> 
                   :
l.476 	omega_acc+macron:
                        
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

! Character code 0 is already in a ligtable.
<to be read again> 
                   :
l.476 	omega_acc+macron:
                        
It's not legal to label a character more than once.
So I'll not change anything just now.

>> iotasub
! Invalid code has been replaced by 0.
<to be read again> 
                   |=:
l.477 	iotasub						|=:
                        iotasubomega;
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

>> iotasubomega
! Invalid code has been replaced by 0.
<to be read again> 
                   ;
l.477 	iotasub						|=: iotasubomega;
                                     
I was looking for a number between 0 and 255, or for a
string of length 1. Didn't find it; will use 0 instead.

) (/usr/share/texmf-texlive/fonts/source/public/wnri/facutact.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [144] [248])
(/usr/share/texmf-texlive/fonts/source/public/wnri/macracct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [226] [156]
[228] [158] [230])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [224] [155]
[227] [157] [229])
(/usr/share/texmf-texlive/fonts/source/public/wnri/baraacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [181] [183]
[189]) (/usr/share/texmf-texlive/fonts/source/public/wnri/fbaraact.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/gravacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [133] [138]
[141] [149] [151])
(/usr/share/texmf-texlive/fonts/source/public/wnri/bargacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [182] [184]
[190]) (/usr/share/texmf-texlive/fonts/source/public/wnri/fbargact.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/cdilacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [135])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [128])
(/usr/share/texmf-texlive/fonts/source/public/wnri/tildacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [208] [211]
[209] [166] [164] [212] [210])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [165])
(/usr/share/texmf-texlive/fonts/source/public/wnri/brevacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [213] [214])
(/usr/share/texmf-texlive/fonts/source/public/wnri/brbracct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [168] [192]
[169] [193] [170])
(/usr/share/texmf-texlive/fonts/source/public/wnri/ubaracct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [196] [136]
[131] [215] [173] [159] [202] [180] [201])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [185] [147]
[204] [203] [206] [186] [187] [188])
(/usr/share/texmf-texlive/fonts/source/public/wnri/udacacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [198])
(/usr/share/texmf-texlive/fonts/source/public/wnri/udgracct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [199])
(/usr/share/texmf-texlive/fonts/source/public/wnri/udmcacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [237] [233])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [238] [234])
(/usr/share/texmf-texlive/fonts/source/public/wnri/mudaacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [207])
(/usr/share/texmf-texlive/fonts/source/public/wnri/hachacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [176] [220]
[178] [171]) (/usr/share/texmf-texlive/fonts/source/public/wnri/fhachact.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [177] [223]
[219] [172]) (/usr/share/texmf-texlive/fonts/source/public/wnri/uumlacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [197] [179])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [140] [152])
(/usr/share/texmf-texlive/fonts/source/public/wnri/bnduacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [191])
(/usr/share/texmf-texlive/fonts/source/public/wnri/ubrvacct.mf)
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanla.mf [222])
(/usr/share/texmf-texlive/fonts/source/public/wnri/romanua.mf [195]) ) )
Font metrics written on wnris10.tfm.
Output written on wnris10.1493gf (253 characters, 112488 bytes).
